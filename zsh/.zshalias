alias gstv='git status -vv'

alias dot='cd ~/.dotfiles && git status'

alias lst='lsa -t'
alias vrc="vim ~/.vimrc"
alias zrc="vim ~/.zshrc"
alias irc="vim ~/.config/i3/config"

#List recently changed files
alias lh='ls -lh --color=always -t | head'

alias open='mimeopen'
alias ls='ls --color=tty --group-directories-first'
alias vim='nvim'
alias update='sudo pacman -Syu'
alias accio='sudo pacman -Sy'

alias fuck='sudo $(fc -ln -1)'

#When leaving ranger, keep the terminal in the current directory
alias ranger='ranger --choosedir=$HOME/.rangerdir; LASTDIR=`cat $HOME/.rangerdir`; cd "$LASTDIR"' 
alias r='ranger'

alias diff='colordiff'

alias cat="bat --theme=1337" #Cat clone with syntax highlighting

unalias zz

# fasd & fzf change directory
zz() {
    local file
    file="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${file}" || return 1
}

alias a='fasd -a'        # any
alias s='fasd -si'       # show / search / select
alias d='fasd -d'        # directory
alias f='fasd -f'        # file
alias sd='fasd -sid'     # interactive directory selection
alias sf='fasd -sif'     # interactive file selection
alias z='fasd_cd -d'     # cd, same functionality as j in autojump
alias j='z'
alias v='f -e nvim' # quick opening files with vim
alias o='a -e xdg-open' # quick opening files with xdg-open

cs() {
    cd $1 && ls 
}

ca() {
    cd $1 && lsa
}

#Pipe into less
pl() {
    "$1" | less
}

tldr() {
    wget -qO- cheat.sh/$1
}

alias chx="chmod +x"

alias mv="mv -i"
alias fd="fd --hidden"

# Need to add --no-thin due to some weird unpacker error
gpg() {
    branch=$(git rev-parse --abbrev-ref HEAD)
    git push --no-thin gerrit HEAD:refs/for/$branch
}
# Push to develop
alias gpgd="git push --no-thin gerrit HEAD:refs/for/develop"
# Push draf to develop
alias gpdd="git push --no-thin gerrit HEAD:refs/drafts/develop"

unalias gpd
gpd() {
    branch=$(git rev-parse --abbrev-ref HEAD)
    git push --no-thin gerrit HEAD:refs/drafts/$branch
}
gpt() {
    branch=$(git rev-parse --abbrev-ref HEAD)
    git push --no-thin gerrit HEAD:refs/for/${branch}%topic=$1
}
# Push top develop with topic set to current branch
gpbt() {
    branch=$(git rev-parse --abbrev-ref HEAD)
    git push --no-thin gerrit HEAD:refs/for/develop%topic=${branch}
}
gpgdt() {
    git push --no-thin gerrit HEAD:refs/for/develop%topic=$1
}
gpddt() {
    git push --no-thin gerrit HEAD:refs/drafts/develop%topic=$1
}
alias gpg!="gcan! && gpg"
alias gpgd!="gcan! && gpgd"
alias gpd!="gcan! && gpd"
alias gpdd!="gcan! && gpdd"
alias gsf="git submodule foreach"
alias gsfb="gsf \"git branch | grep '\*.*' --color=always | grep -v develop | sed "s/from/$(printf "\033[35mfrom\033[0m")/g" || : && git status | egrep 'modified|deleted|new file' --color=always || :\" | sed 's/Entering//' | column"
alias gsfgb="gsfb"
alias gsfglr="gsf git pull --rebase"
alias gsfglra="gsf git pull --rebase --autostash"
alias gsfgco="gsf git checkout"
alias gsfgcd="gsf git checkout develop"

#Parallel pull
gsfglrp() {
    git submodule foreach --recursive --quiet pwd | xargs -P10 -I{} zsh -c "cd {} && git pull --rebase"
}

alias gstv="git status -vv"

alias gs="git stash"
alias gsp="git stash pop"

unalias gcp
unalias gl

alias glr="git pull --rebase"
alias glra="git pull --rebase --autostash"
alias gc-="git checkout -" #Checkout previous branch
alias gcp="git cherry-pick"

# Checkout branch via fzf
fgco() {
 local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# Run git in another path
alias gitc="git -C" 

unalias grbi
grbi () { git rebase -i HEAD~$1 }
alias grbo='git rebase -i origin/develop'
alias grbt='git rebase -i $(tig-pick)'

alias grt='git revert $(tig-pick)'

alias tiga='tig --all --word-diff=plain'
alias tigs='tig status'

# fasd & fzf change directory - jump using `fasd` if given argument, filter output of `fasd` using `fzf` else
unalias z
z() {
    [ $# -gt 0 ] && fasd_cd -d "$*" && return
    local dir
    dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" && ls || return 1
}

zle -N z
bindkey '\ec' z

makeadoc() {
    cmd="asciidoctor-pdf --require asciidoctor-diagram $1";
    eval "$cmd";
    open "$(basename $1 .adoc).pdf" &;

    echo $1 | entr zsh -c $cmd;
}
